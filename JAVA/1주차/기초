## 기초 ##

** 소프트웨어 **
- 컴퓨터 하드웨어를 작동시켜 쇼핑을 하고 신문을 보고 음악을 듣고 게임을 할 수 있게 하는 것

** 프로그래밍 언어 **
- 기계어 : 이진수 명령어들로 구성된 언어
- 어셈블리어 : 기계어의 각 명령을 ADD, SUB, MOVE 등 가급적 표현하기 쉬운 상징적인 니모닉 기호로 일대응 시킨 것
- 고급 언어 : 사람이 이해하기 쉽고, 복잡한 알고리즘이나 프로그램, 자료를 효율적으로 표현할 수 있음 -> 절차 지향 언어 형태를 거쳐 객체 지향 언어로 진화

** WORA (Write Once Run Anywhere) **
- 자바는 웹 브라우저, 분산 환경의 지원 등으로 네트워크에 연결된 어느 클라이언트에서도 실행이 가능함
- 어디서든 한 번 작성하면, 다시 컴파일하거나 수정하지 않고, 어떤 하드웨어에서나 운영체제어세도 실행시킬 수 있음

** 바이트 코드 **
- 자바 가상 기계에서만 실행되는 기계어로, 어떤 CPU와도 관계없는 바이너리 코드
- 이진수로 되어 있어 해석하지 어려움

** JDK **
- 자바 개발자를 위한 상업용 소프트웨어로, 자바 컴파일러 등의 개발 도구와 JRE로 구성됨
- JRE : 자바 응용프로그램이 실행될 때 필요한 소프트웨어들로 개발자가 활용할 수 있는 자바 API와 자바 가상 기계를 포함함

** 자바 IDE **
- 소스 코드 편집, 컴파일, 디버깅을 한꺼번에 할 수 있는 통합 개발 환경
- 대표적으로 이클립스(eclipse)가 있음

** 자바 소스 **
- 클래스 이름과 소스 파일의 이름이 일치해야 함

public class Hello2024 {
  public static void main(String[] args) {
    ...
  }
}

** 자바 특징 **
- 플랫폼 독립성 : 하드웨어, 운영체제 등 플랫폼에 종속되지 않는 독립적인 바이트 코드로 컴파일되며 자바 가상 기계만 있으면 언제 어디서든 실행이 가능함
- 객체 지향 : 캡슐화, 상속, 다형성을 지원함
- 클래스로 캡슐화 : 변수나 메소드는 반드시 클래스 내에 구현하도록 함
- 소스와 클래스 파일 : 클래스 파일에는 반드시 하나의 자바 클래스만 들어 있음
- 실행 코드 배포 : 다수의 클래스 파일을 jar 파일 형태로 압축해 배포하거나 실행할 수 있음
- 패키지 : 서로 관련 있는 클래스는 패키지로 묶어 관리함
- 멀티스레드 : 하나의 자바 프로그램이 다수의 작업을 처리할 수 있도록 다수의 스레드가 동시에 실행할 수 있는 환경을 지원함
- 가비지 컬렉션 : 메모리를 할당받는 기능은 있지만, 메모리를 반환하는 기능은 없어 프로그래밍의 부담을 대폭 줄여줌 -> 자바 가상 기계의 가비지 컬렉션 기능에 의해 자동으로 회수됨
- 실시간 응용 시스템에 부적합 : 실행 도중 예측할 수 없는 시점에 가비지 컬렉션이 실행되므로 프로그램이 일시적으로 중단됨
- 안전 : 타입 체크가 매우 엄격하며, C/C++와 달리 메모리의 물리적 주소를 사용하는 포인터의 개념이 없기 때문에 잘못된 자바 프로그램으로 인해 컴퓨터 시스템이 중단되는 일은 없음
- 프로그램 작성이 쉬움 : C/C++에 있는 포인터 개념이 없기 때문에 프로그램 작성에 부담이 적고, 다양한 라이브러리와 강력한 GUI 라이브러리를 지원해 작성이 빠르고 쉬움
- 실행 속도를 개선하기 위해 JIT 컴파일러 사용 : 인터프리터 바익으로 바이트 코드를 실행하므로 실행이 느리다고 알려져 있지만, 최근에는 실행하는 도중 자바 프로그램을 해당 CPU의 기계어 코드로 컴파일하고 CPU가 바로 기계어를 실행하도록 하는 JIP 컴파일링 기법을 이용하여 개선됨

** Open Challenge **
public class MyInfoApp {
  public static void main(String[] args) {
    System.out.println("Kitae Hwang");
    System.out.println("20 years old");
    System.out.println("Department of Computer Engineering");
  }
}

** 실습문제 **
Q1.
public class Welcome {
  public static void main(String[] args) {
    System.out.println("Welcom!!");
    System.out.println("자바 세계로 오신 것을 환영합니다.");
  }
}

Q2.
public class Sorry {
  public static void main(String[] args) {
    System.out.println("Sorry~~");
    System.out.println("재밌어서 미안합니다~~");
  }
}
