## 클래스와 객체 ##

** 객체 지향 언어 **
- 캡슐화 : 객체를 캡슐로 싸서 내부를 보호하고 볼 수 없게 하는 것
- 상속 : 자식 클래스가 부모 클래스의 속성을 물려받고 기능을 추가하여 확장하는 것
- 다형성 : 같은 이름의 메소드가 클래스 혹은 객체에 따라 다르게 동작하도록 구현되는 것
-> 오버라이딩 : 슈퍼 클래스에 구현된 메소드를, 서브 클래스에서 동일한 이름으로 자신의 특성에 맞게 다시 구현하는 것
-> 오버로딩 : 클래스 내에서 이름이 같지만 서로 다르게 동작하는 메소드를 여러 개 만드는 것
- 소프트웨어 생산성 향상
- 실세계에 대한 쉬운 모델링

** 클래스와 객체 **
- 클래스 : 객체를 만들어 내기 위한 설계도 혹은 틀
- 객체(인스턴스) : 클래스 모양 그대로 생성된 실체
public class Circle {
  public int radius;
  public Strig name;

  public Circle() { // 생성자
  }
  public double getArea() {
    return 3.14*raduis*raduis;
  }
} 
- 레퍼런스 변수 선언 : Circle pizza;
- 객체 생성 : pizza = new Circle();

** 생성자 **
- 객체가 생성될 때 객체의 초기화를 위해 실행되는 메소드
- 이름은 클래스 이름과 동일
- 리턴 타입 지정 불가
- 여러 개 작성(오버로딩) 가능
- new를 통해 객체를 생성할 때 한 번만 호출
- 생성자가 하나도 없는 경우, 컴파일러는 기본 생성자를 자동으로 생성
- 생성자가 하나라도 존재하는 클래스에는 컴파일러가 기본 생성자를 삽입해 주지 않음

** this 레퍼런스 **
- 현재 객체 자신에 대한 레퍼런스
public class Circle {
  int radius;
  public Circle(int r) { this.raduis = r; }
  public int getRadius() { return radius; }
}

** this() **
- 클래스 내에서 생성자가 다른 생성자를 호출할 때 사용
public Bookd() {
  this("", "");
}
- 반드시 생성자 코드에서만 호출 가능
- 반드시 생성자의 첫 번째 문장

** 객체 배열 **
- 객체에 대한 레퍼런스를 원소로 갖는 배열
Circle [] c;
c = new Circle[5];
for(int i = 0; i < c.length; i++)
  c[i] = new Circle(i);

** 메소드 **
- 메소드 호출 시 인자 전달 방식 : 값에 의한 호출
- 메소드의 매개변수가 클래스 타입인 경우, 객체가 아니라 객체의 레퍼런스 값이 전달됨
- 배열이 전달되는 경우에는 배열에 대한 레퍼런스만 전달됨

** 메소드 오버로딩 **
- 한 클래스 내에, 이름이 같지만 매개변수의 타입이나 개수가 서로 다른 여러 개의 메소드 중복 작성 가능
- 메소드 이름이 동일해야 함
- 매개변수의 개수나 타입이 서로 달라야 함

** 가비지 **
- 자바 응용프로그램에서 더 이상 사용되지 않게 된 객체나 배열 메모리
- 참조하는 레퍼런스가 하나도 없는 객체나 배열을 가비지로 판단
- 가비지 컬렉션 : 자바 플랫폼은 가용 메모리가 일정 크기 이하로 줄어들면 자동으로 가비지를 회수하여 가용 메모리를 늘림
- 가비지 컬렉션은 자바 플랫폼에 의해 준비된 가비지 컬렉션 스레드에 의해 처리됨
- System 또는 Runtime 객체의 gc() 메소드를 호출하면 가비지 컬렉션 요청 가능
System.gc();

** 패키지 **
- 서로 관련 있는 클래스 파일들을 패키지에 저장하여 관리

** 접근 지정자 **
- private, protected, public, 접근 지정자 생략(디폴트)
- public 클래스 : 패키지에 상관없이 다른 어떤 클래스에게도 사용 허용
- 디폴트 클래스(접근 지정자 생략) : 같은 패키지 내의 클래스들에게만 사용 허용
- 멤버 접근 지정
public : 같은 패키지, 다른 패키지, 모든 클래스
protected : 같은 패키지 모든 클래스, 다른 패키지에 있는 자식 클래스
디폴트 : 같은 패키지 모든 클래스
private : 클래스 내

** static 멤버 **
- 객체를 생성하지 않고도 사용 가능
- 전역 변수와 전역 함수를 만들 때 활용
- 공유 멤버를 만들고자 할 때 활용
- static 메소드는 static 멤버만 접근 가능
- static 메소드는 this 사용 불가

** final **
- 클래스 이름 앞에 사용되면 클래스를 상속받을 수 없음을 지정
- final 메소드 : 오버라이딩 불가
- final 필드 : 상수
